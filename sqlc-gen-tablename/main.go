package main

import (
	"bufio"
	"fmt"
	"io"
	"log"
	"os"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/sqlc-dev/sqlc/internal/plugin"
	"google.golang.org/protobuf/proto"
)

// Options copied from sqlc's internal/codegen/golang/opts/options.go
type Options struct {
	Rename         map[string]string
	InitialismsMap map[string]struct{}
}

// StructName copied exactly from sqlc's internal/codegen/golang/struct.go
func StructName(name string, options *Options) string {
	if rename := options.Rename[name]; rename != "" {
		return rename
	}
	out := ""
	name = strings.Map(func(r rune) rune {
		if unicode.IsLetter(r) {
			return r
		}
		if unicode.IsDigit(r) {
			return r
		}
		return rune('_')
	}, name)

	for _, p := range strings.Split(name, "_") {
		if _, found := options.InitialismsMap[p]; found {
			out += strings.ToUpper(p)
		} else {
			out += strings.Title(p)
		}
	}

	// If a name has a digit as its first char, prepend an underscore to make it a valid Go name.
	r, _ := utf8.DecodeRuneInString(out)
	if unicode.IsDigit(r) {
		return "_" + out
	} else {
		return out
	}
}

// convertTableNameToStructName converts a table name to its corresponding struct name
func convertTableNameToStructName(tableName string) string {
	opts := &Options{
		Rename: make(map[string]string),
		InitialismsMap: map[string]struct{}{
			"id": {},
		},
	}
	return StructName(tableName, opts)
}

func main() {
	log.SetOutput(os.Stderr)
	if err := run(); err != nil {
		fmt.Fprintf(os.Stderr, "error generating TableName methods: %s", err)
		os.Exit(2)
	}
}

func run() error {
	log.SetOutput(os.Stderr)

	var req plugin.GenerateRequest
	reqBlob, err := io.ReadAll(os.Stdin)
	if err != nil {
		return fmt.Errorf("failed to read stdin: %w", err)
	}

	if err := proto.Unmarshal(reqBlob, &req); err != nil {
		return fmt.Errorf("failed to unmarshal request: %w", err)
	}

	resp := &plugin.GenerateResponse{}

	if req.Catalog == nil {
		return fmt.Errorf("catalog is nil")
	}

	for _, schema := range req.Catalog.Schemas {
		// Only process tables in the public schema
		if schema.Name != "public" {
			continue
		}

		for _, table := range schema.Tables {
			if table.Rel == nil {
				continue
			}

			// Skip system tables
			if strings.HasPrefix(strings.ToLower(table.Rel.Name), "pg_") {
				continue
			}

			tableName := table.Rel.Name
			structName := convertTableNameToStructName(tableName)

			content := fmt.Sprintf(`// Code generated by sqlc-gen-tablename. DO NOT EDIT.
package db

func (%s *%s) TableName() string {
	return "%s"
}
`, structName[:1], structName, tableName)

			fileName := fmt.Sprintf("%s_tablename.go", strings.ToLower(tableName))

			resp.Files = append(resp.Files, &plugin.File{
				Name:     fileName,
				Contents: []byte(content),
			})
		}
	}

	respBlob, err := proto.Marshal(resp)
	if err != nil {
		return fmt.Errorf("failed to marshal response: %w", err)
	}

	w := bufio.NewWriter(os.Stdout)
	if _, err := w.Write(respBlob); err != nil {
		return fmt.Errorf("failed to write response: %w", err)
	}
	if err := w.Flush(); err != nil {
		return fmt.Errorf("failed to flush response: %w", err)
	}

	return nil
}
