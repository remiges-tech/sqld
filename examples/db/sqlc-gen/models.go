// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package sqlc

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type EmployeeStatus string

const (
	EmployeeStatusActive     EmployeeStatus = "active"
	EmployeeStatusOnLeave    EmployeeStatus = "on_leave"
	EmployeeStatusTerminated EmployeeStatus = "terminated"
)

func (e *EmployeeStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EmployeeStatus(s)
	case string:
		*e = EmployeeStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for EmployeeStatus: %T", src)
	}
	return nil
}

type NullEmployeeStatus struct {
	EmployeeStatus EmployeeStatus `json:"employee_status"`
	Valid          bool           `json:"valid"` // Valid is true if EmployeeStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEmployeeStatus) Scan(value interface{}) error {
	if value == nil {
		ns.EmployeeStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EmployeeStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEmployeeStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EmployeeStatus), nil
}

type Account struct {
	ID            int64              `db:"id" json:"id"`
	AccountNumber string             `db:"account_number" json:"account_number"`
	AccountName   string             `db:"account_name" json:"account_name"`
	AccountType   string             `db:"account_type" json:"account_type"`
	Balance       pgtype.Numeric     `db:"balance" json:"balance"`
	Currency      string             `db:"currency" json:"currency"`
	Status        string             `db:"status" json:"status"`
	OwnerID       pgtype.Int8        `db:"owner_id" json:"owner_id"`
	CreatedAt     pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt     pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

func (Account) TableName() string {
	return "accounts"
}

type CommonReferenceMaster struct {
	ID        int64              `db:"id" json:"id"`
	Entity    string             `db:"entity" json:"entity"`
	EntityKey string             `db:"entity_key" json:"entity_key"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type Employee struct {
	ID         int64              `db:"id" json:"id"`
	FirstName  string             `db:"first_name" json:"first_name"`
	LastName   string             `db:"last_name" json:"last_name"`
	Email      string             `db:"email" json:"email"`
	Phone      pgtype.Text        `db:"phone" json:"phone"`
	HireDate   pgtype.Date        `db:"hire_date" json:"hire_date"`
	Salary     pgtype.Numeric     `db:"salary" json:"salary"`
	Department pgtype.Text        `db:"department" json:"department"`
	Position   pgtype.Text        `db:"position" json:"position"`
	IsActive   pgtype.Bool        `db:"is_active" json:"is_active"`
	CreatedAt  pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	Status     NullEmployeeStatus `db:"status" json:"status"`
}

func (Employee) TableName() string {
	return "employees"
}

type EmployeeStat struct {
	Department    pgtype.Text `db:"department" json:"department"`
	EmployeeCount int64       `db:"employee_count" json:"employee_count"`
	AvgSalary     float64     `db:"avg_salary" json:"avg_salary"`
	EarliestHire  interface{} `db:"earliest_hire" json:"earliest_hire"`
}

type Holder struct {
	ID         int64              `db:"id" json:"id"`
	RefID      int64              `db:"ref_id" json:"ref_id"`
	HolderRank pgtype.Int8        `db:"holder_rank" json:"holder_rank"`
	DeletedAt  pgtype.Timestamptz `db:"deleted_at" json:"deleted_at"`
	DeletedBy  pgtype.Text        `db:"deleted_by" json:"deleted_by"`
	CreatedAt  pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type NonIndividualDetail struct {
	ID         int64              `db:"id" json:"id"`
	RefID      int64              `db:"ref_id" json:"ref_id"`
	EntityType string             `db:"entity_type" json:"entity_type"`
	OrgName    pgtype.Text        `db:"org_name" json:"org_name"`
	CreatedAt  pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type PersonDetail struct {
	ID         int64              `db:"id" json:"id"`
	RefID      int64              `db:"ref_id" json:"ref_id"`
	EntityType string             `db:"entity_type" json:"entity_type"`
	FirstName  pgtype.Text        `db:"first_name" json:"first_name"`
	MiddleName pgtype.Text        `db:"middle_name" json:"middle_name"`
	LastName   pgtype.Text        `db:"last_name" json:"last_name"`
	CreatedAt  pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type TaxStatusMaster struct {
	ID        int64              `db:"id" json:"id"`
	TaxName   string             `db:"tax_name" json:"tax_name"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type Ucc struct {
	UccID            int64              `db:"ucc_id" json:"ucc_id"`
	ClientCode       pgtype.Text        `db:"client_code" json:"client_code"`
	MemberCode       pgtype.Text        `db:"member_code" json:"member_code"`
	TaxStatus        pgtype.Int8        `db:"tax_status" json:"tax_status"`
	HoldingNature    pgtype.Int8        `db:"holding_nature" json:"holding_nature"`
	UccStatus        pgtype.Int8        `db:"ucc_status" json:"ucc_status"`
	IsClientPhysical bool               `db:"is_client_physical" json:"is_client_physical"`
	IsClientDemat    bool               `db:"is_client_demat" json:"is_client_demat"`
	ParentClientCode pgtype.Text        `db:"parent_client_code" json:"parent_client_code"`
	DeletedAt        pgtype.Timestamptz `db:"deleted_at" json:"deleted_at"`
	DeletedBy        pgtype.Text        `db:"deleted_by" json:"deleted_by"`
	CreatedAt        pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt        pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}
